const GoogleStrategy = require('passport-google-oauth20').Strategy



passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: isProduction ? process.env.GOOGLE_CALLBACK_URL :
                              "/api/auth/google/redirect",
  },
  async (accessToken, refreshToken, profile, done) => {
    const googleUser = await fetchUserByGoogleId(profile.id)
    if(googleUser) {
      return done(null, googleUser, { message: 'User found' });
    } else {
      //Check if we have an active user with this email and add google_id
      const userDb = await fetchUserByEmail(profile.emails[0].value)
      if (userDb?.active) {
        const googleUser = {
          id: userDb.id,
          google_id: profile.id
        }
        const newGoogleUser = await addGoogleIdUser(googleUser)
        return done(null, newGoogleUser, { message: 'Google login added to user'})
      }

      const user = {
        email: profile.emails[0].value,
        google_id: profile.id,
        first_name: profile.name.givenName,
        last_name: profile.name.familyName,
        user_role: "customer"
      }        
      const newUser = await createUser(user)
      const newCart = await createCart(newUser.id)
      newUser.cart_id = newCart.id //Attach cart_id to the newUser object so it can appear in JWT cookie on first login
      return done(null, newUser, { message: 'New user created' })
    }
}))